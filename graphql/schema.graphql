scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")
scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")
scalar Date @scalar(class: "MLL\\GraphQLScalars\\Date")


type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    event(
      id: ID @eq
    ): Event @find

    events(
      name: String! @where(operator: "like")
    ): [Event!]! @paginate(defaultCount: 10)

    speaker(
      id: ID @eq
    ): Speaker @find

    speakers(
      name: String! @where(operator: "like")
    ): [Speaker!]! @paginate(defaultCount: 10)
}

type User {
    id: ID!
    name: String!
    email: Email!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Event {
    id: ID!
    name: String!
    city: String!
    venue: String!
    date: Date!
    speakers: [Speaker!]! @hasMany
}

type Speaker {
    id: ID!
    name: String!
    email: Email!
    city: String!
    country: String!
    event: Event! @belongsTo
}

type Mutation {

  createEvent(
    name: String!
    city: String!
    venue: String!
    date: Date!
    online: Boolean!
  ): Event @create

  updateEvent(
    id: ID!
    name: String
    city: String
    venue: String
    date: Date
  ): Event @update


  deleteEvent (
    id: ID! @wherekey
  ): Event @delete



}